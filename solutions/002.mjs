import * as lib from '../lib.mjs';

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2. the first 10 terms will be
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, ****find the sum of the even-valued terms***

function fib(n) {
  let prev = 1;
  let secondToPrev = 2;
  if (n === 1 || n === 2) {
    return n;
  }

  for (let i = 2; i <= n; i++) {
    let nextValue = prev + secondToPrev;
    prev = secondToPrev;
    secondToPrev = nextValue;
  }
  return prev;
}

class Fib {
  constructor() {
    this.i = 0;
  }
  getNext() {
    this.i++;
    return fib(this.i);
  }
  filter(cond) {
    return new lib.Filter(cond, this);
  }
  takeWhile(cond) {
    return new lib.TakeWhile(cond, this);
  }
}

export default class Solution002 {
  solve() {
    let result = new Fib()
      .takeWhile((x) => x < 4_000_000)
      .filter((x) => x % 2 === 0)
      .sum();
    return result;
  }
  solution() {
    return undefined;
  }
}
